// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
import fs from 'fs';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ URL
async function checkService(name, url) {
    try {
        const response = await fetch(url);
        console.log(`‚úÖ ${name}: –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
        return true;
    } catch (error) {
        console.log(`‚ùå ${name}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${error.message})`);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–∞ .env
function checkEnvFile() {
    try {
        const envContent = fs.readFileSync('.env', 'utf8');
        console.log('\nüìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ .env:');
        
        const lines = envContent.split('\n').filter(line => line.trim() && !line.startsWith('#'));
        lines.forEach(line => {
            const [key, value] = line.split('=');
            if (key && value) {
                // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª–∏ –∏ —Ç–æ–∫–µ–Ω—ã
                const maskedValue = key.includes('PASSWORD') || key.includes('TOKEN') || key.includes('SECRET') 
                    ? '*'.repeat(value.length) 
                    : value;
                console.log(`   ${key}: ${maskedValue}`);
            }
        });
        return true;
    } catch (error) {
        console.log('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
    console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤\n');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
    checkEnvFile();
    
    console.log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    const services = [
        { name: 'Backend API', url: 'http://localhost:3001/api/health' },
        { name: 'Frontend', url: 'http://localhost:3000' },
        { name: 'MinIO', url: 'http://localhost:9000' },
        { name: 'MongoDB', url: 'http://localhost:27017' }
    ];
    
    const results = [];
    for (const service of services) {
        const isAvailable = await checkService(service.name, service.url);
        results.push({ ...service, available: isAvailable });
    }
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    const available = results.filter(r => r.available).length;
    const total = results.length;
    console.log(`–î–æ—Å—Ç—É–ø–Ω–æ: ${available}/${total} —Å–µ—Ä–≤–∏—Å–æ–≤`);
    
    console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:');
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const backendAvailable = results.find(r => r.name === 'Backend API')?.available;
    const minioAvailable = results.find(r => r.name === 'MinIO')?.available;
    const mongoAvailable = results.find(r => r.name === 'MongoDB')?.available;
    
    if (backendAvailable && minioAvailable && mongoAvailable) {
        console.log('üü¢ –í–ê–†–ò–ê–ù–¢ 1 (–¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è): –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø');
        console.log('   - –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã');
        console.log('   - –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä');
    } else {
        console.log('üî¥ –í–ê–†–ò–ê–ù–¢ 1 (–¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è): –ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø');
        console.log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π');
    }
    
    console.log('\nüü° –í–ê–†–ò–ê–ù–¢ 2 (Telegram Bot API): –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ê');
    console.log('   - –ù–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã');
    console.log('   - –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ webhook\'–æ–≤');
    console.log('   - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–æ–≤ (20MB)');
    
    console.log('\nüü† –í–ê–†–ò–ê–ù–¢ 3 (–ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞): –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï');
    console.log('   - –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è');
    console.log('   - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å');
    console.log('   - –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è MVP');
    
    console.log('\nüéØ –ò–¢–û–ì–û–í–ê–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:');
    if (available >= 3) {
        console.log('   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –í–ê–†–ò–ê–ù–¢ 1 —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏');
    } else if (available >= 1) {
        console.log('   –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –í–ê–†–ò–ê–ù–¢ 2 (Telegram Bot API)');
    } else {
        console.log('   –ù–∞—á–Ω–∏—Ç–µ —Å –í–ê–†–ò–ê–ù–¢–ê 3 (–ü—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)');
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);