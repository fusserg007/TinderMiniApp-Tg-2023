// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
import fs from 'fs';
import path from 'path';
import FormData from 'form-data';
import fetch from 'node-fetch';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = '7366223026:AAGvtUl6a1SX6GPlNIWopluow1nZ_iYsKfU';
const BACKEND_URL = 'http://localhost:4000';

// –í–∞—Ä–∏–∞–Ω—Ç 1: Telegram Bot API –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ
async function testTelegramUpload() {
    console.log('\nüß™ –¢–µ—Å—Ç 1: –ó–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ Telegram Bot API');
    
    try {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (base64)
        const testImageBase64 = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
        const imageBuffer = Buffer.from(testImageBase64, 'base64');
        
        const formData = new FormData();
        formData.append('photo', imageBuffer, {
            filename: 'test.png',
            contentType: 'image/png'
        });
        formData.append('chat_id', '123456789'); // –¢–µ—Å—Ç–æ–≤—ã–π chat_id
        
        const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendPhoto`, {
            method: 'POST',
            body: formData
        });
        
        const result = await response.json();
        
        if (result.ok) {
            console.log('‚úÖ Telegram API —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log('üì∑ File ID:', result.result.photo[result.result.photo.length - 1].file_id);
            return { success: true, fileId: result.result.photo[result.result.photo.length - 1].file_id };
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ Telegram API:', result.description);
            return { success: false, error: result.description };
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API:', error.message);
        return { success: false, error: error.message };
    }
}

// –í–∞—Ä–∏–∞–Ω—Ç 2: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
async function testLocalStorage() {
    console.log('\nüß™ –¢–µ—Å—Ç 2: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤');
    
    try {
        const uploadsDir = path.join(__dirname, 'uploads');
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if (!fs.existsSync(uploadsDir)) {
            fs.mkdirSync(uploadsDir, { recursive: true });
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
        const testImageBase64 = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==';
        const imageBuffer = Buffer.from(testImageBase64, 'base64');
        const filename = `test-${Date.now()}.png`;
        const filepath = path.join(uploadsDir, filename);
        
        fs.writeFileSync(filepath, imageBuffer);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–ª—Å—è
        if (fs.existsSync(filepath)) {
            console.log('‚úÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            console.log('üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', filepath);
            
            // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
            fs.unlinkSync(filepath);
            
            return { success: true, path: `/uploads/${filename}` };
        } else {
            console.log('‚ùå –§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è');
            return { success: false, error: '–§–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–ª—Å—è' };
        }
    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è:', error.message);
        return { success: false, error: error.message };
    }
}

// –í–∞—Ä–∏–∞–Ω—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ MinIO
async function testMinIOConnection() {
    console.log('\nüß™ –¢–µ—Å—Ç 3: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MinIO');
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å MinIO
        const response = await fetch('http://localhost:9000/minio/health/live', {
            method: 'GET',
            timeout: 5000
        });
        
        if (response.ok) {
            console.log('‚úÖ MinIO –¥–æ—Å—Ç—É–ø–µ–Ω');
            return { success: true };
        } else {
            console.log('‚ùå MinIO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
            return { success: false, error: `HTTP ${response.status}` };
        }
    } catch (error) {
        console.log('‚ùå MinIO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        return { success: false, error: error.message };
    }
}

// –¢–µ—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ backend API
async function testCurrentBackend() {
    console.log('\nüß™ –¢–µ—Å—Ç 4: –¢–µ–∫—É—â–∏–π backend API');
    
    try {
        const response = await fetch(`${BACKEND_URL}/health`, {
            method: 'GET',
            timeout: 5000
        });
        
        if (response.ok) {
            console.log('‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω');
            return { success: true };
        } else {
            console.log('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç–∞—Ç—É—Å:', response.status);
            return { success: false, error: `HTTP ${response.status}` };
        }
    } catch (error) {
        console.log('‚ùå Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        return { success: false, error: error.message };
    }
}

// –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
function analyzeResults(results) {
    console.log('\n' + '='.repeat(60));
    console.log('üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò');
    console.log('='.repeat(60));
    
    const [telegram, localStorage, minIO, backend] = results;
    
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:');
    console.log(`ü§ñ Telegram API: ${telegram.success ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}`);
    console.log(`üíæ –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ: ${localStorage.success ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}`);
    console.log(`‚òÅÔ∏è MinIO: ${minIO.success ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}`);
    console.log(`üîß Backend: ${backend.success ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'}`);
    
    console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    
    if (!minIO.success && backend.success) {
        console.log('\nü•á –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø #1: –õ–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤');
        console.log('   ‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:');
        console.log('   - –ü—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏');
        console.log('   - –ù–µ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤');
        console.log('   - –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–¥–∞—á–∞ —Ñ–∞–π–ª–æ–≤');
        console.log('   - –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Ñ–∞–π–ª–∞–º–∏');
        console.log('   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:');
        console.log('   - –§–∞–π–ª—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (–∑–∞–Ω–∏–º–∞—é—Ç –º–µ—Å—Ç–æ)');
        console.log('   - –ü—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã');
        console.log('   üí° –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è: MVP, –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
    }
    
    if (telegram.success) {
        console.log('\nü•à –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø #2: Telegram Bot API');
        console.log('   ‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:');
        console.log('   - –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Telegram');
        console.log('   - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
        console.log('   - –í—ã—Å–æ–∫–∞—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å');
        console.log('   - CDN Telegram –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏');
        console.log('   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:');
        console.log('   - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API Telegram (20 –∑–∞–ø—Ä–æ—Å–æ–≤/–º–∏–Ω—É—Ç—É)');
        console.log('   - –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞');
        console.log('   - –°–∂–∞—Ç–∏–µ –º–æ–∂–µ—Ç —É—Ö—É–¥—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ');
        console.log('   üí° –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è: –ø—Ä–æ–¥–∞–∫—à–Ω —Å –Ω–µ–±–æ–ª—å—à–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π');
    }
    
    if (minIO.success) {
        console.log('\nü•â –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø #3: MinIO/S3 (—Ç–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)');
        console.log('   ‚úÖ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:');
        console.log('   - –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å');
        console.log('   - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å S3');
        console.log('   - –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ');
        console.log('   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–∫–∏:');
        console.log('   - –°–ª–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
        console.log('   - –¢—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã');
        console.log('   - –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–±—ã—Ç–æ—á–Ω–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤');
        console.log('   üí° –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è: –∫—Ä—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –ø—Ä–æ–¥–∞–∫—à–Ω');
    } else {
        console.log('\n‚ùå MinIO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ –∑–∞–≤–∏—Å–∞–Ω–∏—è!');
        console.log('   üîß –î–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
        console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop');
        console.log('   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: docker-compose -f docker-compose.dev.yml up -d object-storage');
        console.log('   3. –ò–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç');
    }
    
    console.log('\nüöÄ –ü–õ–ê–ù –î–ï–ô–°–¢–í–ò–ô:');
    if (!minIO.success) {
        console.log('1. üîÑ –ë—ã—Å—Ç—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ');
        console.log('2. ü§ñ –°—Ä–µ–¥–Ω–∏–π —Å—Ä–æ–∫: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å Telegram Bot API');
        console.log('3. ‚òÅÔ∏è –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ: –ù–∞—Å—Ç—Ä–æ–∏—Ç—å MinIO –∏–ª–∏ –æ–±–ª–∞—á–Ω–æ–µ S3');
    } else {
        console.log('1. ‚úÖ MinIO —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ');
        console.log('2. üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ backend –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞');
        console.log('3. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ API –Ω–∞–ø—Ä—è–º—É—é');
    }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
    console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–ê–†–ò–ê–ù–¢–û–í –ó–ê–ì–†–£–ó–ö–ò –§–û–¢–û–ì–†–ê–§–ò–ô');
    console.log('='.repeat(60));
    
    const results = await Promise.all([
        testTelegramUpload(),
        testLocalStorage(),
        testMinIOConnection(),
        testCurrentBackend()
    ]);
    
    analyzeResults(results);
}

// –ó–∞–ø—É—Å–∫
if (import.meta.url === `file://${process.argv[1]}`) {
    runAllTests().catch(console.error);
}

export {
    testTelegramUpload,
    testLocalStorage,
    testMinIOConnection,
    testCurrentBackend
};