# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—É–Ω–Ω–µ–ª–µ–π –∏ webhook –¥–ª—è Telegram Mini App

Write-Host "üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—É–Ω–Ω–µ–ª–µ–π –∏ webhook..." -ForegroundColor Green

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL –∏–∑ –≤—ã–≤–æ–¥–∞ cloudflared
function Get-TunnelUrl {
    param(
        [string]$LogFile,
        [int]$TimeoutSeconds = 30
    )
    
    $startTime = Get-Date
    while ((Get-Date) -lt $startTime.AddSeconds($TimeoutSeconds)) {
        if (Test-Path $LogFile) {
            $content = Get-Content $LogFile -Raw
            if ($content -match 'https://[a-zA-Z0-9-]+\.trycloudflare\.com') {
                return $matches[0]
            }
        }
        Start-Sleep -Seconds 1
    }
    return $null
}

# –ó–∞–ø—É—Å–∫ backend —Ç—É–Ω–Ω–µ–ª—è
Write-Host "üåê –ó–∞–ø—É—Å–∫ backend —Ç—É–Ω–Ω–µ–ª—è..." -ForegroundColor Cyan
$backendProcess = Start-Process -FilePath ".\cloudflared.exe" -ArgumentList "tunnel", "--url", "http://localhost:4000", "--logfile", "backend-tunnel.log" -PassThru -WindowStyle Hidden

# –û–∂–∏–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ backend URL
Write-Host "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ backend URL..." -ForegroundColor Yellow
Start-Sleep -Seconds 5
$backendUrl = Get-TunnelUrl -LogFile "backend-tunnel.log"

if ($backendUrl) {
    Write-Host "‚úÖ Backend URL: $backendUrl" -ForegroundColor Green
} else {
    Write-Host "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å backend URL" -ForegroundColor Red
    exit 1
}

# –ó–∞–ø—É—Å–∫ frontend —Ç—É–Ω–Ω–µ–ª—è
Write-Host "üåê –ó–∞–ø—É—Å–∫ frontend —Ç—É–Ω–Ω–µ–ª—è..." -ForegroundColor Cyan
$frontendProcess = Start-Process -FilePath ".\cloudflared.exe" -ArgumentList "tunnel", "--url", "http://localhost:5173", "--logfile", "frontend-tunnel.log" -PassThru -WindowStyle Hidden

# –û–∂–∏–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ frontend URL
Write-Host "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ frontend URL..." -ForegroundColor Yellow
Start-Sleep -Seconds 5
$frontendUrl = Get-TunnelUrl -LogFile "frontend-tunnel.log"

if ($frontendUrl) {
    Write-Host "‚úÖ Frontend URL: $frontendUrl" -ForegroundColor Green
} else {
    Write-Host "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å frontend URL" -ForegroundColor Red
    exit 1
}

# –ß—Ç–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ .env —Ñ–∞–π–ª–∞
$envPath = "backend\.env"
if (Test-Path $envPath) {
    $envContent = Get-Content $envPath
    Write-Host "üìÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ .env —Ñ–∞–π–ª–∞..." -ForegroundColor Cyan
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URLs –≤ .env
    $newEnvContent = @()
    $webhookUpdated = $false
    $frontendUpdated = $false
    
    foreach ($line in $envContent) {
        if ($line -match '^WEBHOOK_URL=') {
            $newEnvContent += "WEBHOOK_URL=$backendUrl/webhook"
            $webhookUpdated = $true
        }
        elseif ($line -match '^FRONTEND_URL=') {
            $newEnvContent += "FRONTEND_URL=$frontendUrl"
            $frontendUpdated = $true
        }
        else {
            $newEnvContent += $line
        }
    }
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    if (-not $webhookUpdated) {
        $newEnvContent += "WEBHOOK_URL=$backendUrl/webhook"
    }
    if (-not $frontendUpdated) {
        $newEnvContent += "FRONTEND_URL=$frontendUrl"
    }
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ .env
    $newEnvContent | Out-File -FilePath $envPath -Encoding UTF8
    Write-Host "‚úÖ .env —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω" -ForegroundColor Green
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏–∑ .env
    $botToken = ($envContent | Where-Object { $_ -match '^TELEGRAM_BOT_TOKEN=' }) -replace 'TELEGRAM_BOT_TOKEN=', ''
    
    if ($botToken) {
        Write-Host "ü§ñ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook..." -ForegroundColor Cyan
        $webhookUrl = "$backendUrl/webhook"
        
        try {
            $response = Invoke-RestMethod -Uri "https://api.telegram.org/bot$botToken/setWebhook" -Method Post -Body @{
                url = $webhookUrl
            }
            
            if ($response.ok) {
                Write-Host "‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $webhookUrl" -ForegroundColor Green
            } else {
                Write-Host "‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: $($response.description)" -ForegroundColor Red
            }
        } catch {
            Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: $_" -ForegroundColor Red
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook
        try {
            $webhookInfo = Invoke-RestMethod -Uri "https://api.telegram.org/bot$botToken/getWebhookInfo" -Method Get
            Write-Host "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:" -ForegroundColor Cyan
            Write-Host "   URL: $($webhookInfo.result.url)" -ForegroundColor White
            Write-Host "   –°—Ç–∞—Ç—É—Å: $($webhookInfo.result.has_custom_certificate ? '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç' : '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π')" -ForegroundColor White
        } catch {
            Write-Host "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook" -ForegroundColor Yellow
        }
    } else {
        Write-Host "‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ" -ForegroundColor Red
    }
} else {
    Write-Host "‚ùå .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
}

Write-Host "" 
Write-Host "üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" -ForegroundColor Green
Write-Host "üì± Backend URL: $backendUrl" -ForegroundColor White
Write-Host "üåê Frontend URL: $frontendUrl" -ForegroundColor White
Write-Host "" 
Write-Host "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:" -ForegroundColor Yellow
Write-Host "1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ backend —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫" -ForegroundColor White
Write-Host "2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram" -ForegroundColor White
Write-Host "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" -ForegroundColor White
Write-Host "" 
Write-Host "–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è..." -ForegroundColor Gray
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ PID –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@{
    BackendTunnel = $backendProcess.Id
    FrontendTunnel = $frontendProcess.Id
    BackendUrl = $backendUrl
    FrontendUrl = $frontendUrl
} | ConvertTo-Json | Out-File -FilePath "tunnel-info.json" -Encoding UTF8