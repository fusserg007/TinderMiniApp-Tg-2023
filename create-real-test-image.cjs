// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG
const fs = require('fs');
const path = require('path');

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG
 */
function createTestImage() {
    console.log('üñºÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...');
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π PNG —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é
    // PNG signature: 89 50 4E 47 0D 0A 1A 0A
    const pngSignature = Buffer.from([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]);
    
    // IHDR chunk –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 100x100 –ø–∏–∫—Å–µ–ª–µ–π, RGB, 8 –±–∏—Ç
    const width = 100;
    const height = 100;
    const ihdrData = Buffer.alloc(13);
    ihdrData.writeUInt32BE(width, 0);     // —à–∏—Ä–∏–Ω–∞
    ihdrData.writeUInt32BE(height, 4);    // –≤—ã—Å–æ—Ç–∞
    ihdrData.writeUInt8(8, 8);            // –≥–ª—É–±–∏–Ω–∞ —Ü–≤–µ—Ç–∞
    ihdrData.writeUInt8(2, 9);            // —Ç–∏–ø —Ü–≤–µ—Ç–∞ (RGB)
    ihdrData.writeUInt8(0, 10);           // –º–µ—Ç–æ–¥ —Å–∂–∞—Ç–∏—è
    ihdrData.writeUInt8(0, 11);           // –º–µ—Ç–æ–¥ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    ihdrData.writeUInt8(0, 12);           // —á–µ—Ä–µ—Å—Å—Ç—Ä–æ—á–Ω–æ—Å—Ç—å
    
    // –°–æ–∑–¥–∞–µ–º IHDR chunk
    const ihdrChunk = createChunk('IHDR', ihdrData);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç)
    const bytesPerPixel = 3; // RGB
    const rowSize = width * bytesPerPixel + 1; // +1 –¥–ª—è filter byte
    const imageDataSize = height * rowSize;
    const imageData = Buffer.alloc(imageDataSize);
    
    for (let y = 0; y < height; y++) {
        const rowStart = y * rowSize;
        imageData[rowStart] = 0; // filter type (None)
        
        for (let x = 0; x < width; x++) {
            const pixelStart = rowStart + 1 + x * bytesPerPixel;
            imageData[pixelStart] = 255;     // R - –∫—Ä–∞—Å–Ω—ã–π
            imageData[pixelStart + 1] = 100; // G - –∑–µ–ª–µ–Ω—ã–π
            imageData[pixelStart + 2] = 100; // B - —Å–∏–Ω–∏–π
        }
    }
    
    // –°–∂–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é zlib (–ø—Ä–æ—Å—Ç–æ–µ —Å–∂–∞—Ç–∏–µ)
    const zlib = require('zlib');
    const compressedData = zlib.deflateSync(imageData);
    
    // –°–æ–∑–¥–∞–µ–º IDAT chunk
    const idatChunk = createChunk('IDAT', compressedData);
    
    // –°–æ–∑–¥–∞–µ–º IEND chunk
    const iendChunk = createChunk('IEND', Buffer.alloc(0));
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
    const pngBuffer = Buffer.concat([
        pngSignature,
        ihdrChunk,
        idatChunk,
        iendChunk
    ]);
    
    return pngBuffer;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç PNG chunk —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –∏ –¥–∞–Ω–Ω—ã–º–∏
 */
function createChunk(type, data) {
    const length = Buffer.alloc(4);
    length.writeUInt32BE(data.length, 0);
    
    const typeBuffer = Buffer.from(type, 'ascii');
    const chunkData = Buffer.concat([typeBuffer, data]);
    
    // –í—ã—á–∏—Å–ª—è–µ–º CRC32
    const crc = require('zlib').crc32(chunkData);
    const crcBuffer = Buffer.alloc(4);
    crcBuffer.writeUInt32BE(crc, 0);
    
    return Buffer.concat([length, chunkData, crcBuffer]);
}

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
try {
    const imageBuffer = createTestImage();
    const outputPath = path.join(__dirname, 'backend', 'uploads', 'test-image-real.png');
    
    // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const uploadsDir = path.dirname(outputPath);
    if (!fs.existsSync(uploadsDir)) {
        fs.mkdirSync(uploadsDir, { recursive: true });
    }
    
    fs.writeFileSync(outputPath, imageBuffer);
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ:', outputPath);
    console.log(`üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(imageBuffer.length / 1024).toFixed(2)} KB`);
    
} catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
}