/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è WEBAPP_URL –≤ .env —Ñ–∞–π–ª–µ
 * –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ URL –æ—Ç ngrok
 */

import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';
import { fileURLToPath } from 'url';

// –ü–æ–ª—É—á–∞–µ–º __dirname –¥–ª—è ES –º–æ–¥—É–ª–µ–π
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ü—É—Ç—å –∫ .env —Ñ–∞–π–ª—É
const envPath = path.join(__dirname, '.env');

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π URL –æ—Ç ngrok —á–µ—Ä–µ–∑ API –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π URL
 */
function getNgrokUrl(providedUrl = null) {
    if (providedUrl) {
        return Promise.resolve(providedUrl);
    }
    
    return new Promise((resolve, reject) => {
        // –ü—Ä–æ–±—É–µ–º PowerShell –∫–æ–º–∞–Ω–¥—É –¥–ª—è Windows
        const command = process.platform === 'win32' 
            ? 'powershell -Command "Invoke-WebRequest -Uri http://localhost:4040/api/tunnels -UseBasicParsing | Select-Object -ExpandProperty Content"'
            : 'curl -s http://localhost:4040/api/tunnels';
            
        exec(command, (error, stdout, stderr) => {
            if (error) {
                reject(error);
                return;
            }
            
            try {
                const data = JSON.parse(stdout);
                const httpTunnel = data.tunnels.find(tunnel => 
                    tunnel.proto === 'https' && tunnel.config.addr === 'localhost:4000'
                );
                
                if (httpTunnel) {
                    resolve(httpTunnel.public_url);
                } else {
                    reject(new Error('HTTP —Ç—É–Ω–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'));
                }
            } catch (parseError) {
                reject(parseError);
            }
        });
    });
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç WEBAPP_URL –≤ .env —Ñ–∞–π–ª–µ
 */
function updateEnvFile(newUrl) {
    try {
        // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env —Ñ–∞–π–ª
        let envContent = fs.readFileSync(envPath, 'utf8');
        
        // –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º WEBAPP_URL –∏ BACKEND_URL
        const webappUrlRegex = /^WEBAPP_URL=.*$/m;
        const backendUrlRegex = /^BACKEND_URL=.*$/m;
        const webappLine = `WEBAPP_URL=${newUrl}`;
        const backendLine = `BACKEND_URL=${newUrl}`;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º WEBAPP_URL
        if (webappUrlRegex.test(envContent)) {
            envContent = envContent.replace(webappUrlRegex, webappLine);
        } else {
            envContent += `\n${webappLine}\n`;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º BACKEND_URL
        if (backendUrlRegex.test(envContent)) {
            envContent = envContent.replace(backendUrlRegex, backendLine);
        } else {
            envContent += `\n${backendLine}\n`;
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        fs.writeFileSync(envPath, envContent);
        console.log(`‚úÖ WEBAPP_URL –∏ BACKEND_URL –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${newUrl}`);
        
        return true;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ .env —Ñ–∞–π–ª–∞:', error.message);
        return false;
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω –ª–∏ URL –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        const providedUrl = process.argv[2];
        
        if (providedUrl) {
            console.log(`üì° –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π URL: ${providedUrl}`);
            const success = updateEnvFile(providedUrl);
            if (success) {
                console.log('\nüìã –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç URL –≤ @BotFather:');
                console.log(`   1. –û—Ç–∫—Ä–æ–π—Ç–µ @BotFather –≤ Telegram`);
                console.log(`   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /mybots`);
                console.log(`   3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞`);
                console.log(`   4. Bot Settings -> Menu Button -> Configure menu button`);
                console.log(`   5. –í—Å—Ç–∞–≤—å—Ç–µ URL: ${providedUrl}`);
            }
            return;
        }
        
        console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ URL –æ—Ç ngrok...');
        const ngrokUrl = await getNgrokUrl();
        
        console.log(`üì° –ù–∞–π–¥–µ–Ω ngrok URL: ${ngrokUrl}`);
        
        const success = updateEnvFile(ngrokUrl);
        if (success) {
            console.log('\nüìã –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç URL –≤ @BotFather:');
            console.log(`   1. –û—Ç–∫—Ä–æ–π—Ç–µ @BotFather –≤ Telegram`);
            console.log(`   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /mybots`);
            console.log(`   3. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞`);
            console.log(`   4. Bot Settings -> Menu Button -> Configure menu button`);
            console.log(`   5. –í—Å—Ç–∞–≤—å—Ç–µ URL: ${ngrokUrl}`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
        console.log('\nüí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:');
        console.log('   - ngrok –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 4000');
        console.log('   - ngrok web interface –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ http://localhost:4040');
        console.log('\nüí° –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å URL:');
        console.log('   node update-ngrok-url.js https://your-ngrok-url.ngrok-free.app');
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ngrok URL...');
main().catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});

export { getNgrokUrl, updateEnvFile };