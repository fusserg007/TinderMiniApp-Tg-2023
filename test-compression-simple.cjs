// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const fs = require('fs');
const path = require('path');
const FormData = require('form-data');

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ API —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
 */
async function testImageCompression() {
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç node-fetch –¥–ª—è CommonJS
    const { default: fetch } = await import('node-fetch');
    console.log('üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const testImagePath = path.join(__dirname, 'backend', 'uploads');
    
    if (!fs.existsSync(testImagePath)) {
        console.log('‚ùå –ü–∞–ø–∫–∞ uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return;
    }
    
    const files = fs.readdirSync(testImagePath).filter(file => 
        file.endsWith('.png') || file.endsWith('.jpg') || file.endsWith('.jpeg')
    );
    
    if (files.length === 0) {
        console.log('‚ùå –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ uploads');
        return;
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const testFile = path.join(testImagePath, 'test-image-real.png');
        console.log(`üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª: test-image-real.png`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const originalStats = fs.statSync(testFile);
    console.log(`üìè –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${(originalStats.size / 1024).toFixed(2)} KB`);
    
    try {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const formData = new FormData();
        formData.append('photo', fs.createReadStream(testFile));
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º initData –∫–∞–∫ URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        const initDataParams = new URLSearchParams();
        initDataParams.append('user', JSON.stringify({
            id: 12345,
            first_name: 'Test',
            last_name: 'User',
            username: 'testuser',
            language_code: 'ru'
        }));
        initDataParams.append('hash', 'test_hash'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π hash –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        initDataParams.append('auth_date', Math.floor(Date.now() / 1000).toString());
        
        formData.append('initData', initDataParams.toString());
        formData.append('gender', 'male');
        formData.append('interests', 'female');
        formData.append('age-range', '18-25');
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ Telegram
        const tgInitData = `user=%7B%22id%22%3A${Date.now()}%2C%22first_name%22%3A%22Test%22%2C%22last_name%22%3A%22User%22%2C%22username%22%3A%22testuser%22%2C%22language_code%22%3A%22ru%22%7D&hash=test`;
        
        console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');
        
        const response = await fetch('http://localhost:4000/api/registration', {
            method: 'POST',
            headers: {
                'X-Telegram-Init-Data': tgInitData,
                ...formData.getHeaders()
            },
            body: formData
        });
        
        if (!response.ok) {
            const errorText = await response.text();
            throw new Error(`HTTP ${response.status}: ${errorText}`);
        }
        
        const result = await response.json();
        console.log('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
        console.log('üìã –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:', JSON.stringify(result, null, 2));
        
        if (result.ok && result.data) {
            console.log(`üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${result.data.id}`);
            console.log(`üñºÔ∏è –ü—É—Ç—å –∫ —Å–∂–∞—Ç–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: ${result.data.photo}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            const compressedPath = path.join(__dirname, 'backend', result.data.photo.replace('/image/', 'uploads/'));
        
            if (fs.existsSync(compressedPath)) {
                const compressedStats = fs.statSync(compressedPath);
                const compressedSize = compressedStats.size;
                const savings = ((originalStats.size - compressedSize) / originalStats.size * 100).toFixed(1);
                
                console.log(`üìè –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è: ${(compressedSize / 1024).toFixed(2)} KB`);
                console.log(`üíæ –≠–∫–æ–Ω–æ–º–∏—è –º–µ—Å—Ç–∞: ${savings}%`);
                
                if (compressedSize < originalStats.size) {
                    console.log('‚úÖ –°–∂–∞—Ç–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
                } else {
                    console.log('‚ö†Ô∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ —É–º–µ–Ω—å—à–∏–ª—Å—è');
                }
            } else {
                console.log('‚ùå –°–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏:', compressedPath);
            }
        } else {
            console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞:', result);
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
(async () => {
    await testImageCompression();
})().catch(console.error);