interface TelegramResponse<T> {
  ok: boolean;
  result: T;
  description?: string;
}

class TgBotApi {
  #token: string;
  #host: string;

  constructor() {
    this.#token = process.env.BOT_TOKEN || "";
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–æ—Å—Ç API –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (process.env.TEST_MODE === 'true') {
      this.#host = "https://api.telegram.org"; // –¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ API endpoint
      console.log("üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ Telegram –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
    } else {
      this.#host = "https://api.telegram.org";
    }
    
    console.log("ü§ñ Bot token:", this.#token ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log("üåê API Host:", this.#host);
  }

  async setWebhook() {
    const url = process.env.WEBHOOK_URL || process.env.BACKEND_URL || "";
    
    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–µ—à–∞–µ–º HTTP webhook
    if (process.env.TEST_MODE === 'true' && process.env.ALLOW_HTTP === 'true') {
      console.log("üß™ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞:", `${url}`);
      try {
        const result = await this.query("setWebhook", { 
          url: url,
          allowed_updates: ["message", "pre_checkout_query", "callback_query"]
        });
        console.log("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞");
        return result;
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:", error);
        throw error;
      }
    }
    
    // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Ç—Ä–µ–±—É–µ–º HTTPS
    if (url.startsWith('https://')) {
      console.log("üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTPS webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞:", `${url}`);
      return this.query("setWebhook", { 
        url: url,
        allowed_updates: ["message", "pre_checkout_query", "callback_query"]
      });
    } else {
      console.log("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook (—Ç—Ä–µ–±—É–µ—Ç—Å—è HTTPS –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞):", url);
      console.log("üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TEST_MODE=true –∏ ALLOW_HTTP=true –≤ .env");
      return Promise.resolve();
    }
  }

  async query<T>(method: string, body?: Record<any, any>): Promise<T> {
    const pathNameChunks = ["", `bot${this.#token}`, method].filter((chunk) => {
      return typeof chunk === "string";
    });
    const path = pathNameChunks.join("/");

    const url = new URL(path, this.#host);
    console.log("Making request to:", url.toString());
    console.log("With body:", JSON.stringify(body));

    const res = await fetch(url.toString(), {
      method: "POST",
      headers: {
        "Content-Type": "application/json; charset=utf-8",
      },
      body: JSON.stringify(body),
    });
    const data = (await res.json()) as TelegramResponse<T>;
    console.log("Response:", JSON.stringify(data));

    if (!data.ok) {
      throw new Error(data.description || "Unknown error");
    }

    return data.result;
  }
}

export default TgBotApi;
