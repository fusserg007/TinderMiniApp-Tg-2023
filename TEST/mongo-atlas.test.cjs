// –¢–µ—Å—Ç MongoDB —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MongoDB Atlas (–æ–±–ª–∞—á–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
// –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏

const { MongoClient } = require('mongodb');
require('dotenv').config();

/**
 * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas
 */
async function testMongoAtlas() {
  console.log('‚òÅÔ∏è –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas...');
  
  // –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB Atlas (—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è)
  // –≠—Ç–æ –ø—É–±–ª–∏—á–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
  const atlasUri = 'mongodb+srv://readonly:readonly@cluster0.example.mongodb.net/sample_mflix?retryWrites=true&w=majority';
  
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - —Å–æ–∑–¥–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä –Ω–∞ https://cloud.mongodb.com
  const customAtlasUri = process.env.MONGO_ATLAS_URI;
  
  const uriToTest = customAtlasUri || atlasUri;
  
  console.log('üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ–±–ª–∞—á–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
  
  let client;
  
  try {
    client = new MongoClient(uriToTest, {
      serverSelectionTimeoutMS: 10000, // 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      connectTimeoutMS: 10000,
      socketTimeoutMS: 10000,
    });
    
    console.log('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas...');
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Atlas —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const admin = client.db().admin();
    const serverStatus = await admin.serverStatus();
    console.log(`‚úÖ –í–µ—Ä—Å–∏—è MongoDB: ${serverStatus.version}`);
    console.log(`‚úÖ –•–æ—Å—Ç: ${serverStatus.host}`);
    
    // –°–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    const databases = await admin.listDatabases();
    console.log(`üìä –î–æ—Å—Ç—É–ø–Ω–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö: ${databases.databases.length}`);
    
    if (customAtlasUri) {
      // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π Atlas URI, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
      const testDb = client.db('dating_app_test');
      const testCollection = testDb.collection('connection_test');
      
      const testDoc = {
        _id: 'atlas_test_' + Date.now(),
        message: '–¢–µ—Å—Ç Atlas –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
        timestamp: new Date(),
        source: 'TinderMiniApp'
      };
      
      await testCollection.insertOne(testDoc);
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –≤ Atlas —Å–æ–∑–¥–∞–Ω–∞');
      
      const foundDoc = await testCollection.findOne({ _id: testDoc._id });
      if (foundDoc) {
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ –≤ Atlas');
      }
      
      await testCollection.deleteOne({ _id: testDoc._id });
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ Atlas');
    }
    
    console.log('üéâ MongoDB Atlas —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!');
    return true;
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Atlas:', error.message);
    
    if (error.message.includes('Authentication failed')) {
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Atlas');
    } else if (error.message.includes('Server selection timed out')) {
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
    }
    
    return false;
    
  } finally {
    if (client) {
      await client.close();
      console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Atlas –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MongoDB Atlas
 */
function showAtlasInstructions() {
  console.log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ MongoDB Atlas:');
  console.log('\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://cloud.mongodb.com');
  console.log('2. –°–æ–∑–¥–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç');
  console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä (–≤—ã–±–µ—Ä–∏—Ç–µ FREE tier)');
  console.log('4. –°–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
  console.log('   - Username: app_user');
  console.log('   - Password: (—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å)');
  console.log('5. –î–æ–±–∞–≤—å—Ç–µ IP –∞–¥—Ä–µ—Å –≤ whitelist (0.0.0.0/0 –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)');
  console.log('6. –ü–æ–ª—É—á–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (Connect -> Drivers)');
  console.log('7. –î–æ–±–∞–≤—å—Ç–µ –≤ .env —Ñ–∞–π–ª:');
  console.log('   MONGO_ATLAS_URI=mongodb+srv://app_user:password@cluster0.xxxxx.mongodb.net/dating_app?retryWrites=true&w=majority');
  console.log('\nüí° Atlas –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç 512MB –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞');
  console.log('üí° –ò–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
}

/**
 * –¢–µ—Å—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
 */
async function testLocalWithRecommendations() {
  console.log('\nüè† –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ MongoDB...');
  
  const localUris = [
    'mongodb://localhost:27017/dating_app',
    'mongodb://127.0.0.1:27017/dating_app'
  ];
  
  for (const uri of localUris) {
    const client = new MongoClient(uri, {
      serverSelectionTimeoutMS: 2000,
      connectTimeoutMS: 2000,
    });
    
    try {
      await client.connect();
      await client.db('dating_app').admin().ping();
      console.log(`‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π MongoDB –Ω–∞–π–¥–µ–Ω: ${uri}`);
      await client.close();
      return true;
    } catch (error) {
      console.log(`‚ùå ${uri}: ${error.message}`);
      await client.close();
    }
  }
  
  console.log('\nüí° –õ–æ–∫–∞–ª—å–Ω—ã–π MongoDB –Ω–µ –Ω–∞–π–¥–µ–Ω');
  console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ MongoDB Atlas (–æ–±–ª–∞—á–Ω–∞—è –±–∞–∑–∞)');
  console.log('   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MongoDB –ª–æ–∫–∞–ª—å–Ω–æ');
  console.log('   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Docker —Å MongoDB');
  
  return false;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runAllTests() {
  console.log('üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MongoDB...');
  console.log('=' .repeat(50));
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ MongoDB
    const localWorks = await testLocalWithRecommendations();
    
    if (!localWorks) {
      // –ï—Å–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–µ—Å—Ç–∏—Ä—É–µ–º Atlas
      console.log('\n‚òÅÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ–±–ª–∞—á–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      const atlasWorks = await testMongoAtlas();
      
      if (!atlasWorks) {
        showAtlasInstructions();
      }
    }
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
  
  console.log('\n' + '=' .repeat(50));
  console.log('üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  console.log('\nüí° –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:');
  console.log('   - MongoDB Atlas –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞');
  console.log('   - –õ–æ–∫–∞–ª—å–Ω—ã–π MongoDB –¥–ª—è production-like —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests();