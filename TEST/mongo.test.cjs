/**
 * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
 * –ó–∞–ø—É—Å–∫: node TEST/mongo.test.js
 */

const { MongoClient } = require('mongodb');
require('dotenv').config();

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
 */
async function testMongoConnection() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const username = process.env.MONGO_INITDB_ROOT_USERNAME;
    const password = process.env.MONGO_INITDB_ROOT_PASSWORD;
    const database = process.env.MONGODB_DATABASE;
    
    if (!username || !password || !database) {
      throw new Error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è MongoDB');
    }
    
    console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');
    console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${database}`);
    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ URI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    const uri = `mongodb://${username}:${password}@localhost:27017/${database}?authSource=admin`;
    console.log('üîó URI:', uri.replace(password, '***'));
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
    const client = new MongoClient(uri);
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ ping
    await client.db('admin').command({ ping: 1 });
    console.log('‚úÖ Ping —É—Å–ø–µ—à–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const db = client.db(database);
    const collections = await db.listCollections().toArray();
    console.log('üìã –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', collections.map(c => c.name));
    
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const testCollection = db.collection('test');
    await testCollection.insertOne({ test: true, timestamp: new Date() });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞');
    
    const testDoc = await testCollection.findOne({ test: true });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞:', testDoc);
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    await testCollection.deleteMany({ test: true });
    console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    await client.close();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã MongoDB –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MongoDB:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.error('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.error('   - MongoDB –Ω–µ –∑–∞–ø—É—â–µ–Ω');
      console.error('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ 27017)');
      console.error('   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
    } else if (error.code === 18) {
      console.error('üí° –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
      console.error('   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ .env');
      console.error('   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ MongoDB');
    }
    
    return false;
  }
}

/**
 * –¢–µ—Å—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
 */
function testEnvironmentVariables() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
  
  const requiredVars = [
    'MONGO_INITDB_ROOT_USERNAME',
    'MONGO_INITDB_ROOT_PASSWORD',
    'MONGODB_DATABASE',
    'BOT_TOKEN',
    'PORT'
  ];
  
  const missingVars = [];
  const presentVars = [];
  
  requiredVars.forEach(varName => {
    if (process.env[varName]) {
      presentVars.push(varName);
    } else {
      missingVars.push(varName);
    }
  });
  
  console.log('‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', presentVars);
  
  if (missingVars.length > 0) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:', missingVars);
    return false;
  }
  
  console.log('üéâ –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!');
  return true;
}

/**
 * –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
 */
async function runAllTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ MongoDB –∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è\n');
  
  const envTest = testEnvironmentVariables();
  console.log('');
  
  if (!envTest) {
    console.error('‚ùå –¢–µ—Å—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
  }
  
  const mongoTest = await testMongoConnection();
  
  if (envTest && mongoTest) {
    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.');
    process.exit(0);
  } else {
    console.error('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests();