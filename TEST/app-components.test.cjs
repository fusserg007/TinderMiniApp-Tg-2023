// –¢–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤, –∫–ª–∞—Å—Å–æ–≤ –∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏

const path = require('path');
const fs = require('fs');

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
 */
function checkFileExists(filePath) {
  const fullPath = path.resolve(filePath);
  const exists = fs.existsSync(fullPath);
  console.log(`${exists ? '‚úÖ' : '‚ùå'} ${filePath}`);
  return exists;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
 */
function testProjectStructure() {
  console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...');
  
  const requiredFiles = [
    'package.json',
    'env.example',
    'backend/package.json',
    'backend/run-dev-mode.ts',
    'backend/infra/express-http-server.ts',
    'backend/infra/mongo-store.ts',
    'backend/infra/di.ts',
    'backend/tsconfig.json'
  ];
  
  const requiredDirs = [
    'backend',
    'TEST',
    'backend/infra',
    'backend/app',
    'backend/domain',
    'tg-web-app'
  ];
  
  console.log('\nüìÑ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã:');
  let allFilesExist = true;
  for (const file of requiredFiles) {
    if (!checkFileExists(file)) {
      allFilesExist = false;
    }
  }
  
  console.log('\nüìÇ –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:');
  let allDirsExist = true;
  for (const dir of requiredDirs) {
    const exists = fs.existsSync(dir) && fs.statSync(dir).isDirectory();
    console.log(`${exists ? '‚úÖ' : '‚ùå'} ${dir}/`);
    if (!exists) allDirsExist = false;
  }
  
  return allFilesExist && allDirsExist;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json
 */
function testPackageJson() {
  console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json...');
  
  try {
    const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
    
    console.log(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${packageJson.name}`);
    console.log(`‚úÖ –í–µ—Ä—Å–∏—è: ${packageJson.version}`);
    
    const requiredDeps = [
      'express',
      'mongodb',
      'cors',
      'dotenv'
    ];
    
    const requiredDevDeps = [
      'typescript',
      '@types/node',
      '@types/express',
      'ts-node'
    ];
    
    console.log('\nüìö –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:');
    for (const dep of requiredDeps) {
      const exists = packageJson.dependencies && packageJson.dependencies[dep];
      console.log(`${exists ? '‚úÖ' : '‚ùå'} ${dep}`);
    }
    
    console.log('\nüõ†Ô∏è Dev –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:');
    for (const dep of requiredDevDeps) {
      const exists = packageJson.devDependencies && packageJson.devDependencies[dep];
      console.log(`${exists ? '‚úÖ' : '‚ùå'} ${dep}`);
    }
    
    return true;
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json:', error.message);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
 */
function testTypeScriptFiles() {
  console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ TypeScript —Ñ–∞–π–ª–æ–≤...');
  
  const tsFiles = [
    'backend/run-dev-mode.ts',
    'backend/infra/express-http-server.ts',
    'backend/infra/mongo-store.ts',
    'backend/infra/di.ts',
    'backend/app/auth.ts',
    'backend/domain/user.ts'
  ];
  
  let allValid = true;
  
  for (const file of tsFiles) {
    if (fs.existsSync(file)) {
      try {
        const content = fs.readFileSync(file, 'utf8');
        
        // –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
        const hasImports = content.includes('import') || content.includes('require');
        const hasExports = content.includes('export') || content.includes('module.exports');
        const hasBasicStructure = content.length > 50; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        
        if (hasBasicStructure) {
          console.log(`‚úÖ ${file} - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ OK`);
          
          if (hasImports) {
            console.log(`   ‚úÖ –ò–º–ø–æ—Ä—Ç—ã –Ω–∞–π–¥–µ–Ω—ã`);
          }
          
          if (hasExports) {
            console.log(`   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç—ã –Ω–∞–π–¥–µ–Ω—ã`);
          }
        } else {
          console.log(`‚ùå ${file} - —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ –ø—É—Å—Ç–æ–π`);
          allValid = false;
        }
        
      } catch (error) {
        console.log(`‚ùå ${file} - –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: ${error.message}`);
        allValid = false;
      }
    } else {
      console.log(`‚ùå ${file} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      allValid = false;
    }
  }
  
  return allValid;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤
 */
function testEnvFiles() {
  console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ env.example
  if (fs.existsSync('env.example')) {
    console.log('‚úÖ env.example –Ω–∞–π–¥–µ–Ω');
    
    const envExample = fs.readFileSync('env.example', 'utf8');
    const requiredVars = [
      'MONGO_INITDB_ROOT_USERNAME',
      'MONGO_INITDB_ROOT_PASSWORD', 
      'MONGODB_DATABASE',
      'BOT_TOKEN',
      'BOT_USERNAME',
      'PORT',
      'BACKEND_URL',
      'VITE_BACKEND_URL'
    ];
    
    console.log('\nüìã –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ env.example:');
    for (const varName of requiredVars) {
      const exists = envExample.includes(varName);
      console.log(`${exists ? '‚úÖ' : '‚ùå'} ${varName}`);
    }
  } else {
    console.log('‚ùå env.example –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ backend/env.example
  if (fs.existsSync('backend/env.example')) {
    console.log('‚úÖ backend/env.example –Ω–∞–π–¥–µ–Ω');
  } else {
    console.log('‚ùå backend/env.example –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ .env
  if (fs.existsSync('.env')) {
    console.log('\n‚úÖ .env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω');
    
    const envContent = fs.readFileSync('.env', 'utf8');
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env:');
    
    const criticalVars = ['BOT_TOKEN', 'BOT_USERNAME'];
    let hasRealValues = true;
    
    for (const varName of criticalVars) {
      if (envContent.includes(`${varName}=1234567890`) || 
          envContent.includes(`${varName}=your_dating_bot`) ||
          envContent.includes(`${varName}=ABCdefGHIjklMNOpqrsTUVwxyz`)) {
        console.log(`‚ö†Ô∏è ${varName} —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ`);
        hasRealValues = false;
      } else if (envContent.includes(varName)) {
        console.log(`‚úÖ ${varName} –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
      } else {
        console.log(`‚ùå ${varName} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        hasRealValues = false;
      }
    }
    
    if (!hasRealValues) {
      console.log('\nüí° –ó–∞–º–µ–Ω–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –æ—Ç @BotFather');
    }
  } else {
    console.log('\n‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ');
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ Git –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
function testGitSetup() {
  console.log('\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ Git –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
  
  if (fs.existsSync('.git')) {
    console.log('‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Git
    try {
      const { execSync } = require('child_process');
      const gitStatus = execSync('git status --porcelain', { encoding: 'utf8' });
      
      if (gitStatus.trim()) {
        const lines = gitStatus.trim().split('\n');
        const untracked = lines.filter(line => line.startsWith('??')).length;
        const modified = lines.filter(line => line.startsWith(' M')).length;
        
        console.log(`‚ö†Ô∏è –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${modified} –∏–∑–º–µ–Ω–µ–Ω–∏–π, ${untracked} –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤`);
        console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: git add . && git commit -m "Initial setup"');
      } else {
        console.log('‚úÖ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —á–∏—Å—Ç–∞—è');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å Git');
    }
  } else {
    console.log('‚ùå Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
    console.log('üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: git init');
  }
  
  if (fs.existsSync('.gitignore')) {
    console.log('‚úÖ .gitignore –Ω–∞–π–¥–µ–Ω');
    
    const gitignore = fs.readFileSync('.gitignore', 'utf8');
    const requiredIgnores = [
      'node_modules',
      '.env',
      'dist',
      '*.log'
    ];
    
    console.log('\nüö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ .gitignore:');
    for (const ignore of requiredIgnores) {
      const exists = gitignore.includes(ignore);
      console.log(`${exists ? '‚úÖ' : '‚ùå'} ${ignore}`);
    }
  } else {
    console.log('‚ùå .gitignore –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
 */
function generateReadinessReport() {
  console.log('\n' + '='.repeat(60));
  console.log('üìä –û–¢–ß–ï–¢ –û –ì–û–¢–û–í–ù–û–°–¢–ò –ü–†–û–ï–ö–¢–ê');
  console.log('='.repeat(60));
  
  const checks = [
    { name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞', test: testProjectStructure },
    { name: 'Package.json', test: testPackageJson },
    { name: 'TypeScript —Ñ–∞–π–ª—ã', test: testTypeScriptFiles },
    { name: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', test: testEnvFiles },
    { name: 'Git –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', test: testGitSetup }
  ];
  
  let passedChecks = 0;
  const results = [];
  
  for (const check of checks) {
    console.log(`\nüß™ ${check.name}:`);
    const result = check.test();
    results.push({ name: check.name, passed: result });
    if (result) passedChecks++;
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üìà –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
  console.log('='.repeat(60));
  
  for (const result of results) {
    console.log(`${result.passed ? '‚úÖ' : '‚ùå'} ${result.name}`);
  }
  
  const percentage = Math.round((passedChecks / checks.length) * 100);
  console.log(`\nüéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞: ${percentage}% (${passedChecks}/${checks.length})`);
  
  if (percentage >= 80) {
    console.log('üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!');
  } else if (percentage >= 60) {
    console.log('‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤, —Ç—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
  } else {
    console.log('‚ùå –ü—Ä–æ–µ–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–æ—Ä–∞–±–æ—Ç–æ–∫');
  }
  
  console.log('\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  if (percentage < 100) {
    console.log('   1. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã');
    console.log('   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ MongoDB (–ª–æ–∫–∞–ª—å–Ω–æ –∏–ª–∏ Atlas)');
    console.log('   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev');
  } else {
    console.log('   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ MongoDB');
    console.log('   2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ .env —Ñ–∞–π–ª');
    console.log('   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev');
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ TinderMiniApp...');
generateReadinessReport();