// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç MongoDB –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
// –†–∞–±–æ—Ç–∞–µ—Ç —Å MongoDB Atlas –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π

const { MongoClient } = require('mongodb');
require('dotenv').config();

/**
 * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
 */
async function testMongoConnection() {
  console.log('üß™ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  const mongoUri = process.env.MONGO_URI;
  const dbName = process.env.MONGO_DB_NAME || 'dating_app';
  
  if (!mongoUri) {
    console.log('‚ùå MONGO_URI –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ MongoDB');
    console.log('üí° –ü—Ä–∏–º–µ—Ä: MONGO_URI=mongodb://localhost:27017/dating_app');
    return false;
  }
  
  console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã');
  console.log(`üìä –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbName}`);
  
  // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ URI –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  const safeUri = mongoUri.replace(/:([^:@]+)@/, ':***@');
  console.log(`üîó URI: ${safeUri}`);
  
  let client;
  
  try {
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    client = new MongoClient(mongoUri, {
      serverSelectionTimeoutMS: 5000, // 5 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      connectTimeoutMS: 5000,
      socketTimeoutMS: 5000,
    });
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    await client.connect();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const db = client.db(dbName);
    await db.admin().ping();
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—á–∞–µ—Ç');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π
    const collections = await db.listCollections().toArray();
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: ${collections.length}`);
    
    if (collections.length > 0) {
      console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:');
      collections.forEach(col => {
        console.log(`   - ${col.name}`);
      });
    }
    
    // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
    const testCollection = db.collection('test_connection');
    const testDoc = {
      _id: 'test_' + Date.now(),
      message: '–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è',
      timestamp: new Date()
    };
    
    await testCollection.insertOne(testDoc);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞');
    
    const foundDoc = await testCollection.findOne({ _id: testDoc._id });
    if (foundDoc) {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    await testCollection.deleteOne({ _id: testDoc._id });
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
    
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    return true;
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MongoDB:', error.message);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if (error.message.includes('ECONNREFUSED')) {
      console.log('üí° MongoDB —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
      console.log('   - –ó–∞–ø—É—â–µ–Ω –ª–∏ MongoDB —Å–µ—Ä–≤–µ—Ä');
      console.log('   - –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ (–æ–±—ã—á–Ω–æ 27017)');
      console.log('   - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä–∞');
    } else if (error.message.includes('Authentication failed')) {
      console.log('üí° –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å –≤ MONGO_URI');
    } else if (error.message.includes('Server selection timed out')) {
      console.log('üí° –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞ MongoDB');
    }
    
    return false;
    
  } finally {
    if (client) {
      await client.close();
      console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

/**
 * –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö URI –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
async function testDifferentConnections() {
  console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
  
  const testUris = [
    'mongodb://localhost:27017/dating_app',
    'mongodb://127.0.0.1:27017/dating_app',
    'mongodb://admin:password123@localhost:27017/dating_app?authSource=admin'
  ];
  
  for (const uri of testUris) {
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${uri.replace(/:([^:@]+)@/, ':***@')}`);
    
    const client = new MongoClient(uri, {
      serverSelectionTimeoutMS: 3000,
      connectTimeoutMS: 3000,
    });
    
    try {
      await client.connect();
      await client.db('dating_app').admin().ping();
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
      await client.close();
      return uri; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–±–æ—á–∏–π URI
    } catch (error) {
      console.log('‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å:', error.message);
      await client.close();
    }
  }
  
  return null;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  try {
    const success = await testMongoConnection();
    
    if (!success) {
      console.log('\nüîç –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
      const workingUri = await testDifferentConnections();
      
      if (workingUri) {
        console.log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–∞–±–æ—á–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${workingUri.replace(/:([^:@]+)@/, ':***@')}`);
        console.log('üí° –û–±–Ω–æ–≤–∏—Ç–µ MONGO_URI –≤ .env —Ñ–∞–π–ª–µ');
      } else {
        console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
        console.log('üí° –°–º–æ—Ç—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ TEST/setup-mongodb.md');
      }
    }
    
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
  
  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}

// –ó–∞–ø—É—Å–∫
runTests();